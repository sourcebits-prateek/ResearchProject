import os
from subprocess import Popen,PIPE,call

########################

def removeTempFiles():
	return Popen(["rm *.txt"],stdout=PIPE,close_fds=True,shell=True).communicate()[0].strip()

########################

def executeProgram(binaryName, formatString):
	return Popen([binaryName, formatString],stdout=PIPE,close_fds=True).communicate()[0].strip()

########################

def parseAddressSpace(binaryName):
	return Popen(["gdb", "-q", binaryName],stdout=PIPE,close_fds=True).communicate()[0].strip()

########################

def prepareSharedLibrary():
	return Popen(["make","-C","."],stdout=PIPE,close_fds=True).communicate()[0].strip()

########################

# Compares address.txt and procMap.txt contents 
# Checks if any address is in memory with w bit set.
def findVulnPrintf():
	with open('procMap.txt') as f:
		zones = []
		contents = f.read();
		for line in contents.split('\n'):
			if not line:
				continue
			memrange, perms, _ = line.split(None, 2)
			start, end = memrange.split('-')
			zones.append({
				'start': int(start, 16),
				'end': int(end, 16),
				'perms': perms
			})

	with open('address.txt') as f:
		address = f.read().splitlines()				


	for index in range(len(address)):
		for mapping in zones:
			if mapping["start"] <= int(address[index],16) < mapping["end"]:
				break

		# Check the memory permissions
		if "w" in mapping["perms"]:
			print("Format function no. %d has format string in writable memory." % (index+1));

########################

def calculateOffset(binaryName, formatString):
	output = "";
	arg = 1;	
	
	while(1):

		if(arg>50):
			return -1;		

		format =  formatString + "%" + str(arg) + "$x";		
		output = executeProgram(binaryName,format);

		if( formatString+"41414141" in output):
			print("Offset between format string and its address is: %d words" % arg);
			print("Format string used: %s" % format);
			return arg;

		arg = arg + 1;


def prepareFormatString(addressToWrite, addressToOverwrite, distanceInWords):
	return -1;

# Write function which exports custom/default shell code and returns its address
# Write function which shows the addresses of GOT entries which can be overwritten


def main():

	binaryName = os.environ["PWD"] + "/binaries/newproblem1";	
	
	#Remove Temporary files
	removeTempFiles();

	# Find vulnerable printf
	parseAddressSpace(binaryName);	
	
	prepareSharedLibrary();
	os.environ["LD_PRELOAD"] = os.environ["PWD"] + "/customFormatFunctions.so";
	output = executeProgram(binaryName, "test");
	del os.environ["LD_PRELOAD"];

	findVulnPrintf();
	
	# Find Offset 
	r = calculateOffset(binaryName, "AAAA");	
	if(r == -1):
		r1 = calculateOffset(binaryName, "AAAAA");
		if(r1 == -1):
			print("Cannot find offset");
	

if __name__ == '__main__':
	main()
